--------------------
-- Script that prepares for and starts up Gig Performer
-- Author: Andrew Hunt - andrew at musios.app
-- License: Creative Commons CC0 1.0 Universal
--------------------

--------------------
-- Configuration
--------------------

-- List of files and/or directories that are necessary for your Gig file to work. 
-- The '¬' character is for line continuation character (like `\` in Mac scripts)
-- Empty array if none are required.
-- set requiredFiles to {}
set requiredFiles to {¬
	"/Volumes/SilverMusic/Instruments", ¬
	"/Volumes/SilverMusic/Instruments/Native Instruments/", ¬
	"/Volumes/SilverMusic/Instruments/ROLI/", ¬
	"/Volumes/SilverMusic/Instruments/Spitfire/Spitfire Audio - BBC Symphony Orchestra"}

-- Audio interfaces that must be connected. Empty array if none.
set audioInterfaces to {"XPIANO73", "EVO8"}

-- USB devices that must be connected. Empty array if none.
set usbDevices to {"XPIANO73"}

-- Bluetooth devices that must be connected. Empty array if none.
set bluetoothDevices to {"FS-1-WL"}

-- Commands to run in a terminal. Empty array if none.
set terminalCommands to {¬
	"cd /Users/andrew/Dropbox/code/musios/web-sheet-music-midi; https-server", ¬
	"node ~/localssd/numaxpiano-mapper/index.js"}

-- Shell commands to run. Empty array if none.
set shellCommands to {¬
	"sleep 2; open 'https://127.0.0.1:8080'"}
-- "cd '/Users/andrew/Library/CloudStorage/Dropbox/Music/Cover Songs/_CB_CHARTS'; open -a Preview *.pdf", ¬

-- Optional Gig Performer gig file
set gigFile to "/Users/andrew/Dropbox/Music/Gig Performer/Gig Files/Bands/Cover Brothers/Cover Brothers - 2024-11-26.gig"



---------------------------
-- Do the checks and start the Gig!
---------------------------

log "Checking required_files"
check_required_files(requiredFiles)

log "Checking audio interfaces"
check_system_profiler("Audio interface", "SPAudioDataType", audioInterfaces)

log "Checking USB connections"
check_system_profiler("USB Connection", "SPUSBDataType", usbDevices)

log "Checking Bluetooth interfaces"
check_system_profiler("Bluetooth Connection", "SPBluetoothDataType", bluetoothDevices)

log "Executing commands in terminal"
execute_terminal_commands(terminalCommands)

log "Executing shell commands (no terminal)"
execute_shell_commands(shellCommands)

log "Start Gig Performer"
tell application "System Events"
	if (exists disk gigFile) then
		set gpStartScript to "open -a GigPerformer5 '" & gigFile & "'"
	else
		set gpStartScript to "open -a GigPerformer5"
	end if
	log "Start GP: " & gpStartScript
	set report to do shell script gpStartScript
end tell



---------------------------
-- Supporting functions
---------------------------

on check_required_files(requiredFiles)
	set OK to true
	
	tell application "System Events"
		repeat with idx from 1 to length of requiredFiles
			set filePath to item idx of requiredFiles
			
			if (exists disk item filePath) then
				log "  Required file/folder: " & filePath & " OK"
			else
				log "  Required file/folder: " & filePath & " MISSING"
				display dialog ("Missing file or directory: " & filePath) buttons {"Continue", "Cancel"} default button "Cancel" with title "WARNING"
				set OK to false
			end if
		end repeat
	end tell
	
	return OK
end check_required_files


on check_system_profiler(dataTypeText, dataType, array)
	set OK to true
	
	set shellScript to "system_profiler -detailLevel full " & dataType
	set report to do shell script shellScript
	-- log "Shell: " & report
	
	repeat with idx from 1 to length of array
		set search_text to item idx of array
		
		
		if report contains search_text then
			log "  " & dataTypeText & ": " & search_text & " OK"
		else
			log "  " & dataTypeText & ": " & search_text & " MISSING"
			display dialog ("Missing " & dataTypeText & ": " & search_text) buttons {"Continue", "Cancel"} default button "Cancel" with title "WARNING"
			set OK to false
		end if
	end repeat
	
	return OK
end check_system_profiler


on execute_terminal_commands(commands)
	tell application "iTerm"
		activate
		
		set W to create window with default profile
		
		tell W's current session
			repeat with idx from 2 to length of commands
				split horizontally with default profile
			end repeat
		end tell
		
		set T to W's current tab
		repeat with idx from 1 to length of commands
			set command to item idx of commands
			log "  Shell command: " & command
			write T's session idx text command
		end repeat
	end tell
end execute_terminal_commands


on execute_shell_commands(commands)
	repeat with idx from 1 to length of commands
		set command to item idx of commands
		log "  Shell command: " & command
		set report to do shell script command
	end repeat
end execute_shell_commands
